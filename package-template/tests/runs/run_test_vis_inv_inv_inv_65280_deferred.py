# run_test_vis_inv_inv_inv_65280_deferred.py
# Copyright 2023 Roger Marsh
# License: BSD license

"""Add records to database where DPT code does update in multiple chunks.

Use 65280 as default records with index values a function of record; and
set default_records as 65280, modulus as 13 and btod_factor as 20 in the
run_test_vis_inv_inv_inv_65280_deferred(...) call to get the update done
in multiple chunks (as reported in audit.txt generated by the DPT code).

The number of records processed in the final chunk can vary from run to
run, depending on other activity on box, so there is no way of doing a
repeatable run with 65281 as default_records such that a particular
number of records (say 6 or 7) are processed in the final chunk.

Initial runs were on a box with 8Gb memory.  The run says it will use
up to 1610Mb memory (75% of installed RAM).  Clearly not consistent,
but the message text generation dates back to at least 2015 so maybe
the definition of 'installed RAM' is different now (2023) at least in
what user processes are allowed to allocate.

The run takes about 2 hours.

"""
import multiprocessing

import file_definitions
import open_dpt_database
import add_records
import record_tuples


def create_vis_inv_inv_inv(
    default_records=200, brecppg=50, btod_factor=1
):
    """Create a database large enough for default records.

    Provided for convenient use wia multiprocessing.

    """
    open_dpt_database.open_dpt_database(
        file_definitions.VIS_INV_INV_INV,
        file_definitions.vis_inv_inv_inv(
            default_records=default_records,
            brecppg=brecppg,
            btod_factor=btod_factor,
        ),
    ).close_database()


def run_test_vis_inv_inv_inv(
    default_records=200,
    brecppg=50,
    btod_factor=1,
    deferred=False,
    modulus=None,
):
    """Add records to database, one unordered and three invisible fields.

    Keep the database rather than delete it on success.

    """
    add_records.keep_records(
        file_definitions.VIS_INV_INV_INV,
        file_definitions.vis_inv_inv_inv(
            default_records=default_records,
            brecppg=brecppg,
            btod_factor=btod_factor,
        ),
        records=record_tuples.vis_inv_inv_inv(
            default_records=default_records,
            modulus=modulus,
        ),
        deferred=deferred,
    )


def run_test_vis_inv_inv_inv_65280_deferred(
    default_records=200,
    brecppg=50,
    btod_factor=1,
    modulus=None,
    deferred=True,
):
    """Add records to database one file, four fields one invisible.

    That's two unordered fields, two ordered fields, one of them invisible.

    Create a database large enough for default records and add that number
    of records to the database.

    """
    process = multiprocessing.Process(
        target=create_vis_inv_inv_inv,
        kwargs=dict(
            default_records=default_records,
            brecppg=brecppg,
            btod_factor=btod_factor,
        ),
    )
    process.start()
    process.join()
    run_test_vis_inv_inv_inv(
        default_records=default_records,
        brecppg=brecppg,
        btod_factor=btod_factor,
        deferred=deferred,
        modulus=modulus,
    )
    print("run_test_vis_inv_inv_inv_65280_deferred", "done")


if __name__ == "__main__":
    multiprocessing.set_start_method("spawn")
    run_test_vis_inv_inv_inv_65280_deferred(
        default_records=65280, modulus=13, btod_factor=400
    )
